-----------------------------------------------------------
--
-- ECE241 Lab 8
--
-- simple datapath that uses the enhanced 4 x 4 register file
-- to provide two operands for the ALU and a quad 2:1 MUX for
-- for inserting external data from switches into the datapath
--
-- (c)2018 Dr. D. Capson    Dept. of ECE
--                          University of Victoria
--
-----------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DataPath is 
   port(
      externalDataIn :  in std_logic_vector (3 downto 0);  -- input external data from switches
      A_Bus          :  out std_logic_vector (3 downto 0); -- observe on LEDs
      B_Bus          :  out std_logic_vector (3 downto 0); -- observe on LEDs
      ALU_Bus        :  out std_logic_vector (3 downto 0); -- observe on LEDs
      clk_100MHz     :  in std_logic;                      -- the 100MHZ BASYS3 clock input
      PB_in          :  in std_logic;                      -- the push button to cause the register transfer 
      reset          :  in std_logic;                      -- forces all registers to 0000 (when '1)
      write_enable   :  in std_logic;                      -- enable the registers to be written to (when '1')
      D              :  in std_logic_vector (1 downto 0);  -- choose the desitination register (a register to write to)
      SA             :  in std_logic_vector (1 downto 0);  -- choose 1st source register (a register to read from)
      SB             :  in std_logic_vector (1 downto 0);  -- choose 2nd source register (a register to read from)
      ALU_function   :  in std_logic_vector (2 downto 0);  -- choose the ALU function
      DS             :  in std_logic                       -- choose external data (from switches)
   );
end DataPath;


architecture struc of DataPath is

-- define the components we need to build the datapath

component RegFile4x4 is -- we are using the enhanced 4x4 register file that can do 1 write and 2 reads simultaneously
   port(
      DataIn         :  in std_logic_vector (3 downto 0); 
      DataOutA       :  out std_logic_vector (3 downto 0);
      DataOutB       :  out std_logic_vector (3 downto 0);
      clk            :  in std_logic;                      -- clock input
      reset          :  in std_logic;                      -- forces all registers to 0000
      write_enable   :  in std_logic;                      -- enable registers to be written to (when '1')
      write_select   :  in std_logic_vector (1 downto 0);  -- select which register to write to
      read_select_A  :  in std_logic_vector (1 downto 0);  -- select 1st register to read from
      read_select_B  :  in std_logic_vector (1 downto 0)   -- select 2nd register to read from
   );
end component;


component ALU is
      port(
            A, B           : in 	STD_LOGIC_VECTOR(3 DOWNTO 0);
            f              : in 	STD_LOGIC_VECTOR(2 DOWNTO 0);
            ALU_result     : out	STD_LOGIC_VECTOR(3 DOWNTO 0)
      );
end component;


component quad2to1mux is
   port( 
         a,b        : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
         s          : IN STD_LOGIC;
         Y          : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
   );
end component;


component debouncePB is    -- the debounce of the push button
    Port ( 
           clk_100MHz    : in  STD_LOGIC;
           reset         : in  STD_LOGIC;
           PB_in         : in  std_logic;
           PB_out        : out std_logic  
        );  
end component;


-- intermediate signals out of the ALU
signal int_ALU_result   : std_logic_vector (3 downto 0);

-- intermediate signals in/out of the register file
signal int_DataIn   : std_logic_vector (3 downto 0);
signal int_DataOutA : std_logic_vector (3 downto 0);
signal int_DataOutB : std_logic_vector (3 downto 0);


signal int_pulse_out : std_logic; -- the de-bounced (clean) pulse generated by a push button


begin

--  instantiate the quad 2:1 MUX
mux0: quad2to1mux port map(a => externalDataIn, b => int_ALU_result, s => DS, Y => int_DataIn);

--  instantiate the ALU
ALU0: ALU port map(A => int_DataOutA, B => int_DataOutB, f => ALU_function, ALU_result => int_ALU_result);

--  instantiate the 4x4 register file
RegFile0: RegFile4x4 port map (DataIn => int_DataIn, DataOutA => int_DataOutA, DataOutB => int_DataOutB, clk => int_pulse_out, reset => reset,
                               write_enable => write_enable, write_select => D, read_select_A => SA, read_select_B => SB );

--  instantiate the debounce
debouncer: debouncePB port map (clk_100MHz=>clk_100MHz, reset=>reset, PB_in=>PB_in, PB_out => int_pulse_out);



-- output to observe on LEDs
A_Bus <= int_DataOutA;
B_Bus <= int_DataOutB;
ALU_Bus <= int_ALU_result;


end struc;